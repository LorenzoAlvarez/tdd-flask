name: CI to Docker Hub

on:
  push:
    banches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Repo
        uses: actions/checkout@v2

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile.prod
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: lorenzoalvarez/tdd-flask:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
  test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: update compose to last version
        run: docker-compose pull


      - name: Execute docker compose
        run: docker-compose up -d
      
      - name: Run script test
        run: docker-compose exec -T api python -m pytest
      
      - name: Run flake8
        run: docker-compose exec -T api flake8 src
      
      - name: Run Black
        run: docker-compose exec -T api black src --check
      
      - name: Run isort
        run: docker-compose exec -T api isort src --check-only
  deploy:
    runs-on: ubuntu-latest
    env:
      DOCKER_DRIVER: overlay2
      HEROKU_APP_NAME: mighty-eyrie-44192
      HEROKU_REGISTRY_IMAGE: registry.heroku.com/${HEROKU_APP_NAME}/web
    steps:
      - uses: actions/checkout@v2

      - name: Add CURL 
        run: apt-get update && apt-get -y install CURL
      
      - name: change permission
        run: chmod +x ./release.sh
      
      - name: Build image
        run: docker build --tag $HEROKU_REGISTRY_IMAGE --file ./Dockerfilee.prod "."
      
      - name: login
        run: docker login -u _ -p $HEROKU_AUTH_TOKEN registry.heroku.com
      
      - name: push image
        run: docker push $HEROKU_REGISTRY_IMAGE
      
      - name: start script
        run: ./release.sh
